@page "/product"
@using CursoBlazorWebAssembly.Models
@inject ILogger<Product> logger;
@using CursoBlazorWebAssembly.Service
@inject IProductService productService;
@inject NavigationManager navigationManager
@inject IJSRuntime IJSRuntime
@inject IToastService toastService



<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products"/>

<button class="btn btn-danger" @onclick="@(()=> navigationManager.NavigateTo("/addProduct"))">agregar producto</button>
@if (products.Count > 0)
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="card p-1 m-4 border-0 shadow-lg col">
                <img src="@product.Images[0]" alt="Product" class="card-img-top" loading="lazy" width="270"/>
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Eliminar" class="btn btn-danger btn-delete" onclick="@(()=>DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos</p>
}

@code {
    //
    //                
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products = await productService.GetProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await IJSRuntime.InvokeAsync<bool>("confirm",$"remove {product.Title} ?"))
        {
            return;
        }
        await productService.DeleteProducts(product.Id);
        toastService.ShowSuccess("product delete");
        await GetProducts();
        StateHasChanged();
    }
}
